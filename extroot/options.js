!function(e){var t={};function o(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(n,s,function(t){return e[t]}.bind(null,s));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t),o.d(t,"Const",(function(){return a})),o.d(t,"getOptionFromForm",(function(){return c})),o.d(t,"validateForm",(function(){return d})),o.d(t,"removeSlackHostPathFromSlackwebhookPath",(function(){return r})),o.d(t,"validateSlackwebhookPath",(function(){return l})),o.d(t,"validateButtons",(function(){return i})),o.d(t,"setButtonUiState",(function(){return u})),o.d(t,"maskwebhookPathInputValue",(function(){return h})),o.d(t,"togglewebhookPathInputMask",(function(){return m})),o.d(t,"showAlertMessage",(function(){return b})),o.d(t,"constructOptions",(function(){return k}));class n{constructor(e){this.webhookPath="","object"==typeof e&&e.webhookPath&&(this.webhookPath=e.webhookPath)}get webhookUrl(){return this.webhookPath?"https://hooks.slack.com/services/"+this.webhookPath:""}validate(){let e={};return this.webhookPath?this.webhookPath.match(/^(?!(http|\/))[a-zA-Z0-9/]+/)||(e.webhookPath="Enter a correct URL."):e.webhookPath="Enter a Slack Webhook URL for sending message.",e}}class s{constructor(e){this.chrome=e}async getOptions(){return new Promise(e=>{this.chrome.storage.sync.get(["hoge"],t=>{const o=new n(t.hoge);e(o)})})}async setOptions(e){return new Promise((t,o)=>{e instanceof n!=!1?this.chrome.storage.sync.set({hoge:e},()=>{t(!0)}):o("wrong instanceof")})}async contextMenuOnClickedCallback(e){if(!("fuga"===e.menuItemId))return;let t="";const o=["selectionText","linkUrl","srcUrl","pageUrl","frameUrl"];for(const n of o)if(e[n]){t=e[n];break}if(!t)return void console.log("no contents");const n=await this.getOptions();this.sendRequestToSlackApi(t,n.webhookUrl)}addContextMenu(){this.chrome.contextMenus.onClicked.addListener(this.contextMenuOnClickedCallback.bind(this));this.chrome.contextMenus.create({id:"fuga",type:"normal",title:"Send to Slack",contexts:["all"],visible:!0})}async sendRequestToSlackApi(e,t){const o={text:e};return await fetch(t,{method:"POST",cache:"no-cache",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:JSON.stringify(o)}).then(e=>e.text()).then(e=>e)}}const a={domId:{form:"optionForm",webhookPath:"slackWebhookPathInput",testButton:"testButton",saveButton:"saveButton",testButtonLabel:"testButtonLabel",saveButtonLabel:"saveButtonLabel",webhookFeedback:"slackWebhookPathInvalidFeedback",webhookMaskButton:"toggleWebhookPathMaskButton",webhookIconMask:"toggleWebhookPathMaskButtonMask",webhookIconUnMask:"toggleWebhookPathMaskButtonUnMask",alert:"alertMessage",alertTemplate:"alertMessageTemplate"},label:{save:"Save",saving:"Saving...",saveSuccess:"Saved.",test:"Test",testing:"Sending...",testSuccess:"Sent.",testSuccessAddition:"Check Slack channel.",testFailed:"Failed to send a test message."},uiStateChangeIntervalInSec:1};function c(){const e=document.getElementById(a.domId.webhookPath),t=new n;return t.webhookPath=e.value,t}function d(){const e=l();return i(),e}function r(){const e=document.getElementById(a.domId.webhookPath),t=e.value.replace("https://hooks.slack.com/services/","");t&&(e.value=t)}function l(){const e=c().validate(),t=document.getElementById(a.domId.webhookPath);if(e.webhookPath?t.classList.add("is-invalid"):t.classList.remove("is-invalid"),e.webhookPath){document.getElementById(a.domId.webhookFeedback).textContent=e.webhookPath}return void 0===e.webhookPath}function i(){const e=void 0===c().validate().webhookPath;u(a.domId.testButton,a.domId.testButtonLabelst,e?2:1,""),u(a.domId.saveButton,a.domId.saveButtonLabele,e?2:1,"")}function u(e,t,o,n){const s=document.getElementById(e),a=document.getElementById(t);a&&(a.textContent=n),1===o?(s.classList.remove("running"),s.disabled=!0):2===o?(s.classList.remove("running"),s.disabled=!1):3===o&&(s.classList.add("running"),s.disabled=!1)}function h(e){const t=document.getElementById(a.domId.webhookPath),o=document.getElementById(a.domId.webhookIconMask),n=document.getElementById(a.domId.webhookIconUnMask);e?(t.setAttribute("type","password"),o.classList.remove("d-none"),n.classList.add("d-none")):(t.setAttribute("type","text"),o.classList.add("d-none"),n.classList.remove("d-none"))}function m(){h(document.getElementById(a.domId.webhookIconMask).classList.contains("d-none"))}function b(e,t,o,n){if(e){const e=document.getElementById(a.domId.alertTemplate),s=e.cloneNode(!0).getElementsByClassName("alert"),c=s[0].getElementsByClassName("alertMessage"),d=s[0].getElementsByClassName("alertAdditionMessage");s[0].id=a.domId.alert,s[0].classList.add(t?"alert-danger":"alert-success"),c[0].textContent=o,n?d[0].textContent=n:d[0].remove(),e.before(s[0])}else{const e=document.getElementById(a.domId.alert);e&&e.remove()}}function k(){const e=document.getElementById(a.domId.webhookPath);e&&e.addEventListener("blur",()=>{r(),l(),i()});const t=document.getElementById(a.domId.testButton);t&&t.addEventListener("click",()=>{d()&&(b(!1),u(a.domId.testButton,a.domId.testButtonLabel,3,a.label.testing),setTimeout(async()=>{const e=new s(chrome),t=c(),o=await e.sendRequestToSlackApi("test message.",t.webhookUrl).catch(e=>e),n=o instanceof Error;n?b(!0,n,a.label.testFailed,o.stack):b(!0,n,a.label.testSuccess,a.label.testSuccessAddition),u(a.domId.testButton,a.domId.testButtonLabel,2,a.label.test)},1e3*a.uiStateChangeIntervalInSec))});const o=document.getElementById(a.domId.form);o&&o.addEventListener("submit",e=>{e.preventDefault(),e.stopPropagation();d()&&(b(!1),u(a.domId.saveButton,a.domId.saveButtonLabel,3,a.label.saving),setTimeout(()=>{const e=new s(chrome),t=c();e.setOptions(t).then(()=>{b(!0,!1,a.label.saveSuccess),u(a.domId.saveButton,a.domId.saveButtonLabel,2,a.label.save)})},1e3*a.uiStateChangeIntervalInSec))});const n=document.getElementById(a.domId.webhookMaskButton);n&&n.addEventListener("click",()=>{m()});new s(chrome).getOptions().then(e=>{0===Object.keys(e.validate()).length&&(document.getElementById(a.domId.webhookPath).value=e.webhookPath),i(),h(!0)})}k()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,