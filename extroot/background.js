!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t);class n{constructor(e){this.webhookPath="","object"==typeof e&&e.webhookPath&&(this.webhookPath=e.webhookPath)}get webhookUrl(){return this.webhookPath?"https://hooks.slack.com/services/"+this.webhookPath:""}validate(){let e={};return this.webhookPath?this.webhookPath.match(/^(?!(http|\/))[a-zA-Z0-9/]+/)||(e.webhookPath="Enter a correct URL."):e.webhookPath="Enter a Slack Webhook URL for sending message.",e}}class r{constructor(e){this.chrome=e}async getOptions(){return new Promise(e=>{this.chrome.storage.sync.get(["hoge"],t=>{const o=new n(t.hoge);e(o)})})}async setOptions(e){return new Promise((t,o)=>{e instanceof n!=!1?this.chrome.storage.sync.set({hoge:e},()=>{t(!0)}):o("wrong instanceof")})}async contextMenuOnClickedCallback(e){if(!("fuga"===e.menuItemId))return;let t="";const o=["selectionText","linkUrl","srcUrl","pageUrl","frameUrl"];for(const n of o)if(e[n]){t=e[n];break}if(!t)return void console.log("no contents");const n=await this.getOptions();this.sendRequestToSlackApi(t,n.webhookUrl)}addContextMenu(){this.chrome.contextMenus.onClicked.addListener(this.contextMenuOnClickedCallback.bind(this));this.chrome.contextMenus.create({id:"fuga",type:"normal",title:"Send to Slack",contexts:["all"],visible:!0})}async sendRequestToSlackApi(e,t){const o={text:e};return await fetch(t,{method:"POST",cache:"no-cache",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:JSON.stringify(o)}).then(e=>e.text()).then(e=>e)}}chrome.runtime.onInstalled.addListener((function(){new r(chrome).addContextMenu()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,